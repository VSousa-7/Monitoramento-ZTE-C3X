{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "datasource",
          "uid": "grafana"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "target": {
          "limit": 100,
          "matchAny": false,
          "tags": [],
          "type": "dashboard"
        },
        "type": "dashboard"
      }
    ]
  },
  "description": "",
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": 113,
  "links": [],
  "liveNow": false,
  "panels": [
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 4,
        "w": 21,
        "x": 0,
        "y": 0
      },
      "id": 50,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"display: flex; align-items: center; justify-content: space-between; width: 100%; padding: 10px;\">\n    <!-- Imagem à esquerda -->\n    <img src=\"https://mkt2.sobralnet.com.br/wp-content/uploads/2023/09/logo_horizontal.png\" alt=\"Logo\" style=\"max-height: 60px;\">\n\n    <!-- Título centralizado -->\n    <div style=\"flex-grow: 1; text-align: center;\">\n        <h2 style=\"color: #ffffff; font-size: 40px; font-weight: bold; margin: 0;\">MONITOR OLT ZTE</h2>\n    </div>\n\n</div>\n",
        "mode": "html"
      },
      "pluginVersion": "9.5.0",
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 2,
        "w": 9,
        "x": 0,
        "y": 4
      },
      "id": 42,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nfont-size: 20px;\nfont-family: Impact;\nborder-radius: 0px 50px 0px 50px;\nbackground: linear-gradient(100deg, rgba(173, 216, 230, 0.3) 20%, rgb(135, 206, 250) 60%);\npadding: 02px;\">\n\n\n\n    <div style=\"text-align: center; flex-grow: 1;\">\n      <span style=\"color: black;\">STATUS</span>\n      <span style=\"color: #0047AB;\">|</span>\n      <span style=\"color: black;\">ONUS</span>\n    </div> \n\n\n</div>",
        "mode": "html"
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 2,
        "w": 7,
        "x": 9,
        "y": 4
      },
      "id": 47,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nfont-size: 20px;\nfont-family: Impact;\nborder-radius: 0px 50px 0px 50px;\nbackground: linear-gradient( 100deg, rgb(135, 206, 250) 20%, rgba(173, 216, 230, 0.3) 60%);\npadding: 02px;\">\n\n\n\n    <div style=\"text-align: center; flex-grow: 1;\">\n      <span style=\"color: black;\">STATUS</span>\n      <span style=\"color: #0047AB;\">|</span>\n      <span style=\"color: black;\">HARDWARE</span>\n    </div> \n\n\n</div>",
        "mode": "html"
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 2,
        "w": 8,
        "x": 16,
        "y": 4
      },
      "id": 49,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "<div style=\"\ndisplay: flex;\nalign-items: center;\njustify-content: space-between;\nfont-size: 20px;\nfont-family: Impact;\nborder-radius: 0px 50px 0px 50px;\nbackground: linear-gradient(100deg, rgba(173, 216, 230, 0.3) 20%, rgb(135, 206, 250) 60%);\npadding: 02px;\">\n\n\n\n    <div style=\"text-align: center; flex-grow: 1;\">\n      <span style=\"color: black;\">STATUS</span>\n      <span style=\"color: #0047AB;\">|</span>\n      <span style=\"color: black;\">CARDS</span>\n    </div> \n\n\n</div>",
        "mode": "html"
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": ""
          },
          "host": {
            "filter": ""
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "text"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 6
      },
      "id": 43,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/4413/4413923.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">N/AUTORIZADAS</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #005bb7, #004992);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #4e5050, 0 0 10px #4e5050, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #303334, 0 0 20px #303334, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "PON gpon_1/1/10"
          },
          "itemTag": {
            "filter": "ONUs Onlines"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 3,
        "y": 6
      },
      "id": 36,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/8820/8820158.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">AUTORIZADAS</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #007b9a, #004f6b);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #56d5dc;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #56d5dc, 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs Autorizadas"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 6,
        "y": 6
      },
      "id": 38,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/6689/6689985.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">ONUS LOSS</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #c60505, #c60505);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #56d5dc, 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs LOS"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 6,
        "w": 4,
        "x": 9,
        "y": 6
      },
      "id": 41,
      "interval": "1d",
      "maxDataPoints": 1,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  return {\n    name: s.refId,\n    type: 'liquidFill',\n    radius: '90%',\n    showSymbol: true,\n    data: sData.map((d, i) => [d.toFixed(10)] * 0.01),\n    shape: 'diamond',\n    itemStyle: {\n      opacity: 0.8\n    },\n    emphasis: {\n      itemStyle: {\n        opacity: 0.7\n      }\n    }\n  };\n});\n\nreturn {\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: data.series.map((s) => s.refId),\n    textStyle: {\n      color: 'rgba(128, 128, 154, .9)',\n    },\n  },\n\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "json",
        "renderer": "svg",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "repeatDirection": "h",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "Temperatura"
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": true
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "TEMPERATURA",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 13,
        "y": 6
      },
      "id": 45,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/1892/1892518.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}%</span>\n        <span class=\"adapted-name\">USO DE CPU</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #567ba0, #567ba0);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #4e5050, 0 0 10px #4e5050, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #303334, 0 0 20px #303334, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "Uso de CPU Card 1"
          },
          "itemTag": {
            "filter": "Uso de CPU"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "color-background"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#141f32",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "CPU"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 40
                    },
                    {
                      "color": "dark-red",
                      "value": 80
                    }
                  ]
                }
              },
              {
                "id": "max",
                "value": 100
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Memoria"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 40
                    },
                    {
                      "color": "dark-red",
                      "value": 80
                    }
                  ]
                }
              },
              {
                "id": "max",
                "value": 100
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 8,
        "x": 16,
        "y": 6
      },
      "id": 26,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "dataset": "zabbix",
          "datasource": {
            "type": "mysql",
            "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  REPLACE(REPLACE(REPLACE(it.name, 'Nome ', ''), 'Uso de CPU ', ''), 'Uso de Memoria ', '') AS item,\r\n  MAX(CASE WHEN it.name LIKE '%Nome%' THEN hx.value END) AS card,\r\n  MAX(CASE WHEN it.name LIKE '%Uso de CPU%' THEN hu.value END) AS cpu,\r\n  MAX(CASE WHEN it.name LIKE '%Uso de Memoria%' THEN hu.value END) AS memoria\r\nFROM\r\n  items it\r\n  INNER JOIN hosts ht ON ht.hostid = it.hostid\r\n  LEFT JOIN (\r\n    SELECT itemid, MAX(clock) AS max_clock\r\n    FROM history_uint\r\n    GROUP BY itemid\r\n  ) AS max_hu ON it.itemid = max_hu.itemid\r\n  LEFT JOIN history_uint hu ON hu.itemid = max_hu.itemid AND hu.clock = max_hu.max_clock\r\n  LEFT JOIN (\r\n    SELECT itemid, MAX(clock) AS max_clock\r\n    FROM history_text\r\n    GROUP BY itemid\r\n  ) AS max_hx ON it.itemid = max_hx.itemid\r\n  LEFT JOIN history_text hx ON hx.itemid = max_hx.itemid AND hx.clock = max_hx.max_clock\r\nWHERE\r\n  it.flags IN (0, 4)\r\n  AND it.status = 0\r\n  AND ht.status = 0\r\n  AND ht.host IN (\"$host\")\r\n  AND (\r\n    it.name LIKE '%Nome%'\r\n    OR it.name LIKE '%Uso de CPU%'\r\n    OR it.name LIKE '%Uso de Memoria%'\r\n  )\r\nGROUP BY\r\n  item\r\nORDER BY\r\n  item;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "card": "Modelo",
              "cpu": "CPU",
              "item": "Card",
              "memoria": "Memoria"
            }
          }
        }
      ],
      "transparent": true,
      "type": "table"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 0,
        "y": 9
      },
      "id": 37,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://images.vexels.com/media/users/3/205387/isolated/preview/9e5a4a16e78a187fc3e47fc6e2c5f03a-traco-do-icone-do-site-da-internet.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">ONUS ONLINE</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #000000;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #0d9130, #0d9130);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #56d5dc, 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs Onlines"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 3,
        "y": 9
      },
      "id": 39,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/4178/4178461.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">DYINGGASP</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #f96400, #f96400);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #fdfdfd;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #56d5dc, 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #56d5dc, 0 0 20px #56d5dc, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs DyingGasp"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 6,
        "y": 9
      },
      "id": 40,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://cdn-icons-png.flaticon.com/512/6514/6514577.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}</span>\n        <span class=\"adapted-name\">ONUS OFFLINE</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #262728, #262728);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #4e5050, 0 0 10px #4e5050, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #303334, 0 0 20px #303334, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs OFF"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "fieldConfig": {
        "defaults": {
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 3,
        "w": 3,
        "x": 13,
        "y": 9
      },
      "id": 46,
      "options": {
        "afterRender": "",
        "content": "<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <link rel=\"stylesheet\" href=\"styles.css\">\n</head>\n\n<body>\n  <div class=\"adapted-container\">\n    <img src=\"https://static.vecteezy.com/system/resources/previews/059/438/689/non_2x/magnificent-minimalist-ram-module-for-computer-memory-original-free-png.png\" alt=\"Adapted Image\" class=\"adapted-image\">\n    <div class=\"adapted-content\">\n      <div class=\"adapted-value-container\">\n        <span class=\"adapted-value\">{{data.[0].[0].Value}}%</span>\n        <span class=\"adapted-name\">USO DE MEMORIA</span>\n      </div>\n    </div>\n  </div>\n</body>\n\n</html>",
        "defaultContent": "The query didn't return any results.",
        "editor": {
          "format": "auto",
          "language": "html"
        },
        "editors": [
          "styles"
        ],
        "externalScripts": [],
        "externalStyles": [],
        "helpers": "",
        "renderMode": "data",
        "styles": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, sans-serif;\r\n  background-color: #f0f0f0;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  min-height: 100vh;\r\n}\r\n\r\n.adapted-container {\r\n  display: flex;\r\n  align-items: center;\r\n  background: linear-gradient(to right, #567ba0, #567ba0);\r\n  padding: 17px;\r\n  border-radius: 15px;\r\n  width: 100%;\r\n  max-width: 300px;\r\n  height: auto;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.adapted-image {\r\n  width: 40px;\r\n  height: 45px;\r\n  margin-right: 15px;\r\n}\r\n\r\n.adapted-content {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  width: 100%;\r\n}\r\n\r\n.adapted-value-container {\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end; /* Alinha o conteúdo à direita */\r\n  width: 100%;\r\n  position: relative; /* Necessário para o alinhamento vertical */\r\n}\r\n\r\n.adapted-value {\r\n  color: #ffffff;\r\n  font-weight: bold;\r\n  font-size: 16px;\r\n  margin-right: 40px; /* Ajuste o valor conforme necessário */\r\n}\r\n\r\n.adapted-name {\r\n  color: #FFFFFF;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  margin-top: 5px; /* Espaçamento entre o valor e o texto */\r\n  animation: text-glow 1.5s ease-in-out infinite alternate; /* Adiciona animação pulsando indo e voltando */\r\n}\r\n\r\n@keyframes text-glow {\r\n  from {\r\n    text-shadow: 0 0 5px #4e5050, 0 0 10px #4e5050, 0 0 20px #56d5dc, 0 0 30px #56d5dc;\r\n  }\r\n  to {\r\n    text-shadow: 0 0 10px #303334, 0 0 20px #303334, 0 0 30px #56d5dc, 0 0 40px #56d5dc;\r\n  }\r\n}\r\n\r\n/* Consultas de mídia para dispositivos móveis */\r\n@media (max-width: 600px) {\r\n  .adapted-container {\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    width: 100%;\r\n  }\r\n\r\n  .adapted-image {\r\n    width: 30px;\r\n    height: 35px;\r\n    margin-right: 0;\r\n    margin-bottom: 10px;\r\n  }\r\n\r\n  .adapted-value {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .adapted-database {\r\n    font-size: 8px;\r\n  }\r\n}\r\n",
        "wrap": true
      },
      "pluginVersion": "4.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Aggregate",
                "defaultParams": [],
                "name": "sumSeries",
                "params": []
              },
              "params": [],
              "text": "sumSeries()"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "OLT-ZTE"
          },
          "item": {
            "filter": "Uso de Memoria Card 1"
          },
          "itemTag": {
            "filter": "Uso de Memoria"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "marcusolsson-dynamictext-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "dark-green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "1": {
                        "color": "dark-green",
                        "index": 0,
                        "text": "UP"
                      },
                      "2": {
                        "color": "dark-red",
                        "index": 1,
                        "text": "DOWN"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "PON"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "color",
                "value": {
                  "fixedColor": "#001d2c",
                  "mode": "fixed"
                }
              },
              {
                "id": "custom.width",
                "value": 231
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Autorizadas"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": null
                    },
                    {
                      "color": "dark-green",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Onlines"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-red",
                      "value": null
                    },
                    {
                      "color": "dark-green",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Offlines"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-red",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "LOS"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-yellow",
                      "value": 10
                    },
                    {
                      "color": "dark-orange",
                      "value": 20
                    },
                    {
                      "color": "dark-red",
                      "value": 30
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "DyingGasp"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-yellow",
                      "value": 50
                    },
                    {
                      "color": "dark-orange",
                      "value": 80
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Tx Power"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 7
                    },
                    {
                      "color": "dark-red",
                      "value": 21
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Ultima Verificacao"
            },
            "properties": [
              {
                "id": "custom.align",
                "value": "center"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 8,
        "w": 24,
        "x": 0,
        "y": 12
      },
      "id": 25,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": true,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": []
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "datasource": {
            "type": "mysql",
            "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "SELECT\r\n  it.name AS nome_item,\r\n  MAX(CASE WHEN itg.tag LIKE '%ONUs Autorizadas%' THEN hu.value END) AS autorizadas,\r\n  MAX(CASE WHEN itg.tag LIKE '%ONUs Onlines%' THEN hu.value END) AS onlines,\r\n  MAX(CASE WHEN itg.tag LIKE '%ONUs OFF%' THEN hu.value END) AS offlines,\r\n  MAX(CASE WHEN itg.tag LIKE '%ONUs LOS%' THEN hu.value END) AS los,\r\n  MAX(CASE WHEN itg.tag LIKE '%ONUs DyingGasp%' THEN hu.value END) AS dyinggasp,\r\n  DATE_FORMAT(FROM_UNIXTIME(MAX(hu.clock)), '%d-%m-%Y %H:%i:%s') AS ultima_verificacao\r\nFROM\r\n  items it\r\n  INNER JOIN hosts ht ON ht.hostid = it.hostid\r\n  INNER JOIN item_tag itg ON itg.itemid = it.itemid\r\n  LEFT JOIN (\r\n    SELECT itemid, MAX(clock) AS max_clock\r\n    FROM history_uint\r\n    GROUP BY itemid\r\n  ) AS max_hu ON it.itemid = max_hu.itemid\r\n  LEFT JOIN history_uint hu ON hu.itemid = max_hu.itemid AND hu.clock = max_hu.max_clock\r\nWHERE\r\n  it.flags IN (0, 4)\r\n  AND it.status = 0\r\n  AND ht.status = 0\r\n  AND ht.host IN (\"$host\")\r\n  AND it.name LIKE '%PON gpon%'\r\nGROUP BY\r\n  it.name\r\nORDER BY\r\n  it.name;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Visão Geral por PON",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "Sinal": "Tx Power",
              "Ultima Verificacao": "Ult.Coleta",
              "name": "PON"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 0,
        "y": 20
      },
      "id": 30,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para mapear o valor de status (de 0 a 9)\nfunction convertStatus(value) {\n  return value;\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  const timeField = series.fields.find(field => field.type === 'time');\n  const valueFields = series.fields.filter(field => field.type === 'number');\n\n  valueFields.forEach((valueField, valueIndex) => {\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    const data = valueField.values.map((d, index) => {\n      const status = convertStatus(parseInt(d, 10));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: status\n      };\n    });\n\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Calcular a média dos valores para essa série\n    const avg = data.reduce((sum, d) => sum + d.value, 0) / data.length;\n\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      smooth: true,\n      lineStyle: { width: 2 },\n      showSymbol: false,\n      emphasis: { focus: 'series' },\n      avgValue: avg,\n      data: data\n    });\n  });\n});\n\n// Ordenar por valor médio e pegar os 3 maiores para a legenda\nconst top3Series = seriesData\n  .sort((a, b) => b.avgValue - a.avgValue)\n  .slice(0, 3)\n  .map(s => s.name);\n\n// Configuração do gráfico ECharts\nreturn {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: Status ${data.value}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    bottom: '0',\n    left: 'center',\n    data: top3Series,\n    textStyle: {\n      fontSize: 12,\n      color: '#ccc'\n    },\n    itemWidth: 20,\n    itemHeight: 10\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '20%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: { textStyle: { color: '#ccc' } },\n    splitLine: { show: false }\n  }],\n  yAxis: [{\n    type: 'value',\n    min: 0,\n    max: 9,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: {\n      formatter: '{value}',\n      textStyle: { color: '#ccc' }\n    },\n    splitLine: { show: false }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "svg",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "myChart.setOption({\n  color: seriesData.map(() => getRandomColor()),\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: { type: 'cross' },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: ${data.value} ${data.unit}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: { data: seriesData.map(s => s.name) },\n  toolbox: { orient: 'vertical', left: 'right', top: 'center', feature: { saveAsImage: {} } },\n  grid: { left: '3%', right: '4%', bottom: '3%', containLabel: true },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: { textStyle: { color: '#ccc' } },\n    splitLine: { show: false }\n  }],\n  yAxis: [{\n    type: 'value',\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: {\n      formatter: function (value) {\n        const converted = convertBps(value);\n        return `${converted.value} ${commonUnit}`;\n      },\n      textStyle: { color: '#ccc' }\n    },\n    splitLine: { show: false }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n});\n\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Alias",
                "defaultParams": [
                  "/(.*)/",
                  "$1"
                ],
                "name": "replaceAlias",
                "params": [
                  {
                    "name": "regexp",
                    "type": "string"
                  },
                  {
                    "name": "newAlias",
                    "type": "string"
                  }
                ]
              },
              "params": [
                "/$host: /",
                " "
              ],
              "text": "replaceAlias(/(.*)/, $1)"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs Onlines"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Historico de ONUs Onlines",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 6,
        "y": 20
      },
      "id": 31,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para mapear o valor de status (de 0 a 9)\nfunction convertStatus(value) {\n  return value;\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  const timeField = series.fields.find(field => field.type === 'time');\n  const valueFields = series.fields.filter(field => field.type === 'number');\n\n  valueFields.forEach((valueField, valueIndex) => {\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    const data = valueField.values.map((d, index) => {\n      const status = convertStatus(parseInt(d, 10));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: status\n      };\n    });\n\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Calcular a média dos valores para essa série\n    const avg = data.reduce((sum, d) => sum + d.value, 0) / data.length;\n\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      smooth: true,\n      lineStyle: { width: 2 },\n      showSymbol: false,\n      emphasis: { focus: 'series' },\n      avgValue: avg,\n      data: data\n    });\n  });\n});\n\n// Ordenar por valor médio e pegar os 3 maiores para a legenda\nconst top3Series = seriesData\n  .sort((a, b) => b.avgValue - a.avgValue)\n  .slice(0, 3)\n  .map(s => s.name);\n\n// Configuração do gráfico ECharts\nreturn {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: Status ${data.value}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    bottom: '0',\n    left: 'center',\n    data: top3Series,\n    textStyle: {\n      fontSize: 12,\n      color: '#ccc'\n    },\n    itemWidth: 20,\n    itemHeight: 10\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '20%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: { textStyle: { color: '#ccc' } },\n    splitLine: { show: false }\n  }],\n  yAxis: [{\n    type: 'value',\n    min: 0,\n    max: 9,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: {\n      formatter: '{value}',\n      textStyle: { color: '#ccc' }\n    },\n    splitLine: { show: false }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Alias",
                "defaultParams": [
                  "/(.*)/",
                  "$1"
                ],
                "name": "replaceAlias",
                "params": [
                  {
                    "name": "regexp",
                    "type": "string"
                  },
                  {
                    "name": "newAlias",
                    "type": "string"
                  }
                ]
              },
              "params": [
                "/$host: /",
                " "
              ],
              "text": "replaceAlias(/(.*)/, $1)"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs LOS"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Historico de ONUs Los",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 12,
        "y": 20
      },
      "id": 32,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para mapear o valor de status (de 0 a 9)\nfunction convertStatus(value) {\n  return value;\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  const timeField = series.fields.find(field => field.type === 'time');\n  const valueFields = series.fields.filter(field => field.type === 'number');\n\n  valueFields.forEach((valueField, valueIndex) => {\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    const data = valueField.values.map((d, index) => {\n      const status = convertStatus(parseInt(d, 10));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: status\n      };\n    });\n\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Calcular a média dos valores para essa série\n    const avg = data.reduce((sum, d) => sum + d.value, 0) / data.length;\n\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      smooth: true,\n      lineStyle: { width: 2 },\n      showSymbol: false,\n      emphasis: { focus: 'series' },\n      avgValue: avg,\n      data: data\n    });\n  });\n});\n\n// Ordenar por valor médio e pegar os 3 maiores para a legenda\nconst top3Series = seriesData\n  .sort((a, b) => b.avgValue - a.avgValue)\n  .slice(0, 3)\n  .map(s => s.name);\n\n// Configuração do gráfico ECharts\nreturn {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: Status ${data.value}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    bottom: '0',\n    left: 'center',\n    data: top3Series,\n    textStyle: {\n      fontSize: 12,\n      color: '#ccc'\n    },\n    itemWidth: 20,\n    itemHeight: 10\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '20%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: { textStyle: { color: '#ccc' } },\n    splitLine: { show: false }\n  }],\n  yAxis: [{\n    type: 'value',\n    min: 0,\n    max: 9,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: {\n      formatter: '{value}',\n      textStyle: { color: '#ccc' }\n    },\n    splitLine: { show: false }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "custom"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Alias",
                "defaultParams": [
                  "/(.*)/",
                  "$1"
                ],
                "name": "replaceAlias",
                "params": [
                  {
                    "name": "regexp",
                    "type": "string"
                  },
                  {
                    "name": "newAlias",
                    "type": "string"
                  }
                ]
              },
              "params": [
                "/$host: /",
                " "
              ],
              "text": "replaceAlias(/(.*)/, $1)"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs DyingGasp"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Historico de ONUs Energia",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 10,
        "w": 6,
        "x": 18,
        "y": 20
      },
      "id": 33,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "code",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para mapear o valor de status (de 0 a 9)\nfunction convertStatus(value) {\n  return value;\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  const timeField = series.fields.find(field => field.type === 'time');\n  const valueFields = series.fields.filter(field => field.type === 'number');\n\n  valueFields.forEach((valueField, valueIndex) => {\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    const data = valueField.values.map((d, index) => {\n      const status = convertStatus(parseInt(d, 10));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: status\n      };\n    });\n\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Calcular a média dos valores para essa série\n    const avg = data.reduce((sum, d) => sum + d.value, 0) / data.length;\n\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      smooth: true,\n      lineStyle: { width: 2 },\n      showSymbol: false,\n      emphasis: { focus: 'series' },\n      avgValue: avg,\n      data: data\n    });\n  });\n});\n\n// Ordenar por valor médio e pegar os 3 maiores para a legenda\nconst top3Series = seriesData\n  .sort((a, b) => b.avgValue - a.avgValue)\n  .slice(0, 3)\n  .map(s => s.name);\n\n// Configuração do gráfico ECharts\nreturn {\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: Status ${data.value}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    orient: 'horizontal',\n    bottom: '0',\n    left: 'center',\n    data: top3Series,\n    textStyle: {\n      fontSize: 12,\n      color: '#ccc'\n    },\n    itemWidth: 20,\n    itemHeight: 10\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '20%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: { textStyle: { color: '#ccc' } },\n    splitLine: { show: false }\n  }],\n  yAxis: [{\n    type: 'value',\n    min: 0,\n    max: 9,\n    axisLine: { lineStyle: { color: '#ccc' } },\n    axisLabel: {\n      formatter: '{value}',\n      textStyle: { color: '#ccc' }\n    },\n    splitLine: { show: false }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "custom"
        },
        "visualEditor": {
          "code": "console.log(context);\nreturn {\n  dataset: context.editor.dataset,\n  series: context.editor.series,\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n}\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [
            {
              "added": true,
              "def": {
                "category": "Alias",
                "defaultParams": [
                  "/(.*)/",
                  "$1"
                ],
                "name": "replaceAlias",
                "params": [
                  {
                    "name": "regexp",
                    "type": "string"
                  },
                  {
                    "name": "newAlias",
                    "type": "string"
                  }
                ]
              },
              "params": [
                "/$host: /",
                " "
              ],
              "text": "replaceAlias(/(.*)/, $1)"
            }
          ],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": "/.*/"
          },
          "itemTag": {
            "filter": "ONUs OFF"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Historico de ONUs Offlines",
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "mysql",
        "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "center",
            "cellOptions": {
              "type": "color-background"
            },
            "filterable": true,
            "inspect": false
          },
          "mappings": [],
          "noValue": "-",
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#173c48",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Bits In"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bps"
              },
              {
                "id": "custom.width",
                "value": 114
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Bits Out"
            },
            "properties": [
              {
                "id": "unit",
                "value": "bps"
              },
              {
                "id": "custom.width",
                "value": 119
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Status"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "1": {
                        "color": "dark-green",
                        "index": 0,
                        "text": "Up"
                      },
                      "2": {
                        "color": "dark-red",
                        "index": 1,
                        "text": "Down"
                      },
                      "4": {
                        "color": "#808080",
                        "index": 2,
                        "text": "Desconhecido"
                      },
                      "6": {
                        "color": "#808080",
                        "index": 3,
                        "text": "Não presente"
                      }
                    },
                    "type": "value"
                  }
                ]
              },
              {
                "id": "custom.width",
                "value": 96
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Speed"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decbits"
              },
              {
                "id": "custom.width",
                "value": 101
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Consumo Out"
            },
            "properties": [
              {
                "id": "unit",
                "value": "decmbytes"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Uso In (%)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge",
                  "valueDisplayMode": "text"
                }
              },
              {
                "id": "max",
                "value": 100
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 50
                    },
                    {
                      "color": "dark-red",
                      "value": 80
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Uso Out (%)"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "gradient",
                  "type": "gauge",
                  "valueDisplayMode": "text"
                }
              },
              {
                "id": "unit",
                "value": "percent"
              },
              {
                "id": "max",
                "value": 100
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "dark-green",
                      "value": null
                    },
                    {
                      "color": "dark-orange",
                      "value": 50
                    },
                    {
                      "color": "dark-red",
                      "value": 90
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Rx Power (dBm)"
            },
            "properties": [
              {
                "id": "unit",
                "value": " dBm "
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "-40": {
                        "color": "dark-red",
                        "index": 0
                      }
                    },
                    "type": "value"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Tx Power (dBm)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "dBm "
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Interface"
            },
            "properties": [
              {
                "id": "custom.width"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Distancia (KM)"
            },
            "properties": [
              {
                "id": "unit",
                "value": "lengthkm"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Status Sinal"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "anormal": {
                        "color": "dark-orange",
                        "index": 0,
                        "text": "Anormal ⚠️"
                      }
                    },
                    "type": "value"
                  },
                  {
                    "options": {
                      "match": "null",
                      "result": {
                        "color": "dark-green",
                        "index": 1,
                        "text": "Normal ✅"
                      }
                    },
                    "type": "special"
                  }
                ]
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 4,
        "w": 24,
        "x": 0,
        "y": 30
      },
      "id": 28,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "enablePagination": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Bits Out"
          }
        ]
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "dataset": "zabbix",
          "datasource": {
            "type": "mysql",
            "uid": "d806f495-406c-4993-b8ae-43aaf76e69d6"
          },
          "editorMode": "code",
          "format": "table",
          "rawQuery": true,
          "rawSql": "WITH\r\n-- Subconsulta para obter os valores máximos de history_uint\r\nmax_hu AS (\r\n  SELECT\r\n    hu.itemid,\r\n    MAX(hu.clock) AS max_clock\r\n  FROM\r\n    history_uint hu\r\n    INNER JOIN items it ON it.itemid = hu.itemid\r\n    INNER JOIN hosts ht ON ht.hostid = it.hostid\r\n  WHERE\r\n    ht.name IN (\"$host\")\r\n  GROUP BY\r\n    hu.itemid\r\n),\r\n-- Subconsulta para obter os valores máximos de history\r\nmax_h AS (\r\n  SELECT\r\n    h.itemid,\r\n    MAX(h.clock) AS max_clock\r\n  FROM\r\n    history h\r\n    INNER JOIN items it ON it.itemid = h.itemid\r\n    INNER JOIN hosts ht ON ht.hostid = it.hostid\r\n  WHERE\r\n    ht.name IN (\"$host\")\r\n  GROUP BY\r\n    h.itemid\r\n),\r\n-- Subconsulta principal para agregar os dados necessários\r\ndados_agrupados AS (\r\n  SELECT\r\n    ht.name AS host,\r\n    REPLACE(\r\n      REPLACE(\r\n        REPLACE(\r\n          REPLACE(\r\n            REPLACE(\r\n              REPLACE(\r\n                REPLACE(\r\n                  REPLACE(\r\n                    REPLACE(\r\n                      REPLACE(\r\n                        REPLACE(\r\n                          REPLACE(\r\n                            REPLACE(\r\n                              REPLACE(\r\n                                REPLACE(\r\n                                  REPLACE(\r\n                                    REPLACE(\r\n                                      REPLACE(\r\n                                        REPLACE(\r\n                                          REPLACE(it.name, 'Interface ', ''),\r\n                                          ': Bits sent', ''\r\n                                        ),\r\n                                        ': Bits received', ''\r\n                                      ),\r\n                                      ': Operational status', ''\r\n                                    ),\r\n                                    ': Speed', ''\r\n                                  ),\r\n                                  ': Inbound packets discarded', ''\r\n                                ),\r\n                                ': Outbound packets discarded', ''\r\n                              ),\r\n                              ': Inbound packets with errors', ''\r\n                            ),\r\n                            ': Outbound packets with errors', ''\r\n                          ),\r\n                          ': RX Power Avg Lane 1-4', ''\r\n                        ),\r\n                        ': TX Power Avg Lane 1-4', ''\r\n                      ),\r\n                      ': RX Power', ''\r\n                    ),\r\n                    ': TX Power', ''\r\n                  ),\r\n                  ' Lane 1', ''\r\n                ),\r\n                ' Lane 2', ''\r\n              ),\r\n              ' Lane 3', ''\r\n            ),\r\n            ' Lane 4', ''\r\n          ),\r\n          ': Sinal RX', ''\r\n        ),\r\n        ': Sinal TX', ''\r\n      ),\r\n      ': Distancia', ''\r\n    ) AS interface,\r\n    MAX(CASE WHEN it.name LIKE '%Bits sent%' THEN hu.value END) AS bitsin,\r\n    MAX(CASE WHEN it.name LIKE '%Bits received%' THEN hu.value END) AS bitsout,\r\n    MAX(CASE WHEN it.name LIKE '%Operational status%' THEN hu.value END) AS status,\r\n    MAX(CASE WHEN it.name LIKE '%: Speed' THEN hu.value END) AS speed,\r\n    MAX(CASE WHEN it.name LIKE '%Bits sent%' THEN hu.value END) / NULLIF(MAX(CASE WHEN it.name LIKE '%: Speed' THEN hu.value END), 0) * 100 AS usoin,\r\n    MAX(CASE WHEN it.name LIKE '%Bits received%' THEN hu.value END) / NULLIF(MAX(CASE WHEN it.name LIKE '%: Speed' THEN hu.value END), 0) * 100 AS usoout,\r\n    COALESCE(\r\n      MAX(CASE WHEN it.name LIKE '%: RX Power%' THEN h.value END),\r\n      MAX(CASE WHEN it.name LIKE '%: RX Power Avg%' THEN h.value END),\r\n      MAX(CASE WHEN it.name LIKE '%: Sinal RX%' THEN h.value END)\r\n    ) AS rxpower,\r\n    COALESCE(\r\n      MAX(CASE WHEN it.name LIKE '%: TX Power%' THEN h.value END),\r\n      MAX(CASE WHEN it.name LIKE '%: TX Power Avg%' THEN h.value END),\r\n      MAX(CASE WHEN it.name LIKE '%: Sinal TX%' THEN h.value END)\r\n    ) AS txpower,\r\n    MAX(CASE WHEN it.name LIKE '%Distancia%' THEN hu.value END) AS distancia,\r\n    MAX(DATE_FORMAT(FROM_UNIXTIME(hu.clock), '%d-%m-%Y %H:%i:%s')) AS ultverificacao\r\n  FROM\r\n    items it\r\n    INNER JOIN hosts ht ON it.hostid = ht.hostid AND ht.name IN (\"$host\") AND ht.status = 0\r\n    LEFT JOIN max_hu ON it.itemid = max_hu.itemid\r\n    LEFT JOIN history_uint hu ON max_hu.itemid = hu.itemid AND max_hu.max_clock = hu.clock\r\n    LEFT JOIN max_h ON it.itemid = max_h.itemid\r\n    LEFT JOIN history h ON max_h.itemid = h.itemid AND max_h.max_clock = h.clock\r\n  WHERE\r\n    it.flags IN (0, 4)\r\n    AND (it.name LIKE '%ethernet%' OR it.name LIKE '%xgei%')\r\n    AND (\r\n      it.name LIKE '%Bits%'\r\n      OR it.name LIKE '%: Operational status%'\r\n      OR it.name LIKE '%: Speed'\r\n      OR it.name LIKE '%errors%'\r\n      OR it.name LIKE '%discarded%'\r\n      OR it.name LIKE '%Sinal RX%'\r\n      OR it.name LIKE '%Sinal TX%'\r\n      OR it.name LIKE '%RX Power%'\r\n      OR it.name LIKE '%TX Power%'\r\n      OR it.name LIKE '%Distancia%'\r\n    )\r\n  GROUP BY\r\n    interface,\r\n    host\r\n)\r\n-- Consulta final para adicionar os limites e status\r\nSELECT\r\n  *,\r\n  CASE\r\n    WHEN interface LIKE '%xgei%' AND distancia = 10 THEN '0.00 a -9.00'\r\n    WHEN interface LIKE '%xgei%' AND distancia = 40 THEN '-2.00 a -13.00'\r\n    WHEN interface LIKE '%xgei%' AND distancia = 80 THEN '-7.00 a -23.00'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 10 THEN '-1.00 a -11.00'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 40 THEN '0.99 a -17.79'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 80 THEN '-5.00 a -26.02'\r\n    ELSE NULL\r\n  END AS limiterx,\r\n  CASE\r\n    WHEN interface LIKE '%xgei%' AND distancia = 10 AND (rxpower < -9.00 OR rxpower > 0.00) THEN 'anormal'\r\n    WHEN interface LIKE '%xgei%' AND distancia = 40 AND (rxpower < -13.00 OR rxpower > -2.00) THEN 'anormal'\r\n    WHEN interface LIKE '%xgei%' AND distancia = 80 AND (rxpower < -23.00 OR rxpower > -7.00) THEN 'anormal'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 10 AND (rxpower < -11.00 OR rxpower > -1.00) THEN 'anormal'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 40 AND (rxpower < -17.79 OR rxpower > 0.99) THEN 'anormal'\r\n    WHEN interface LIKE '%ethernet%' AND distancia = 80 AND (rxpower < -26.02 OR rxpower > -5.00) THEN 'anormal'\r\n    ELSE 'normal'\r\n  END AS staturx\r\nFROM\r\n  dados_agrupados\r\nORDER BY\r\n  interface;\r\n",
          "refId": "A",
          "sql": {
            "columns": [
              {
                "parameters": [],
                "type": "function"
              }
            ],
            "groupBy": [
              {
                "property": {
                  "type": "string"
                },
                "type": "groupBy"
              }
            ],
            "limit": 50
          }
        }
      ],
      "title": "Análise de Interfaces (Uplinks)",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {
              "host": true
            },
            "includeByName": {},
            "indexByName": {},
            "renameByName": {
              "Interface": "",
              "bitsin": "Bits In",
              "bitsout": "Bits Out",
              "consumoin": "Consumo In",
              "consumoout": "Consumo Out",
              "descartesin": "Descartes In",
              "descartesout": "Descartes Out",
              "distancia": "Distancia (KM)",
              "errosin": "Erros In",
              "errosout": "Erros Out",
              "host": "Host",
              "interface": "Interface",
              "limiterx": "Limites Rx (dBm)",
              "rxpower": "Rx Power (dBm)",
              "rxpoweravg": "Rx Power Avg (dBm)",
              "speed": "Speed",
              "staturx": "Status Sinal",
              "status": "Status",
              "txpower": "Tx Power (dBm)",
              "txpoweravg": "Tx Power Avg (dBm)",
              "ultverificacao": "Ult. Verificação",
              "ultverificao": "Ult.Verificacao",
              "usoin": "Uso In (%)",
              "usoout": "Uso Out (%)"
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 9,
        "w": 24,
        "x": 0,
        "y": 34
      },
      "id": 34,
      "options": {
        "baidu": {
          "callback": "bmapReady",
          "key": ""
        },
        "editor": {
          "format": "auto"
        },
        "editorMode": "visual",
        "gaode": {
          "key": "",
          "plugin": "AMap.Scale,AMap.ToolBar"
        },
        "getOption": "const series = context.panel.data.series.map((s) => {\n  const sData = s.fields.find((f) => f.type === 'number').values.buffer || s.fields.find((f) => f.type === 'number').values;\n  const sTime = s.fields.find((f) => f.type === 'time').values.buffer || s.fields.find((f) => f.type === 'time').values;\n  \n  return {\n    name: s.refId,\n    type: 'line',\n    showSymbol: false,\n    areaStyle: {\n      opacity: 0.1,\n    },\n    lineStyle: {\n      width: 1,\n    },\n    data: sData.map((d, i) => [sTime[i], d.toFixed(2)]),\n  };\n});\n\n/**\n * Enable Data Zoom by default\n */\nsetTimeout(() => context.panel.chart.dispatchAction({\n  type: 'takeGlobalCursor',\n  key: 'dataZoomSelect',\n  dataZoomSelectActive: true,\n}), 500);\n\n/**\n * Update Time Range on Zoom\n */\ncontext.panel.chart.on('datazoom', function (params) {\n  const startValue = params.batch[0]?.startValue;\n  const endValue = params.batch[0]?.endValue;\n  locationService.partial({ from: startValue, to: endValue });\n});\n\nreturn {\n  backgroundColor: 'transparent',\n  tooltip: {\n    trigger: 'axis',\n  },\n  legend: {\n    left: '0',\n    bottom: '0',\n    data: context.panel.data.series.map((s) => s.refId),\n    textStyle: {\n      color: 'rgba(128, 128, 128, .9)',\n    },\n  },\n  toolbox: {\n    feature: {\n      dataZoom: {\n        yAxisIndex: 'none',\n        icon: {\n          zoom: 'path://',\n          back: 'path://',\n        },\n      },\n      saveAsImage: {},\n    }\n  },\n  xAxis: {\n    type: 'time',\n  },\n  yAxis: {\n    type: 'value',\n    min: 'dataMin',\n  },\n  grid: {\n    left: '2%',\n    right: '2%',\n    top: '2%',\n    bottom: 24,\n    containLabel: true,\n  },\n  series,\n};",
        "google": {
          "callback": "gmapReady",
          "key": ""
        },
        "map": "none",
        "renderer": "canvas",
        "themeEditor": {
          "config": "{}",
          "name": "default"
        },
        "visualEditor": {
          "code": "// Inicializar arrays para armazenar os dados das séries e os rótulos de tempo\nconst seriesData = [];\nlet timeLabels = [];\n\n// Função para gerar uma cor aleatória\nfunction getRandomColor() {\n  const letters = '0123456789ABCDEF';\n  let color = '#';\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n  return color;\n}\n\n// Função para converter bps para uma unidade legível\nfunction convertBps(value) {\n  if (value >= 1e9) {\n    return { value: (value / 1e9).toFixed(2), unit: 'Gbps' };\n  } else if (value >= 1e6) {\n    return { value: (value / 1e6).toFixed(2), unit: 'Mbps' };\n  } else if (value >= 1e3) {\n    return { value: (value / 1e3).toFixed(2), unit: 'kbps' };\n  } else {\n    return { value: value.toFixed(2), unit: 'bps' };\n  }\n}\n\n// Função para encontrar a unidade mais comum nas séries\nfunction getCommonUnit(series) {\n  const unitCounts = {};\n  series.forEach(serie => {\n    serie.data.forEach(point => {\n      if (!unitCounts[point.unit]) {\n        unitCounts[point.unit] = 0;\n      }\n      unitCounts[point.unit]++;\n    });\n  });\n  return Object.keys(unitCounts).reduce((a, b) => unitCounts[a] > unitCounts[b] ? a : b);\n}\n\n// Iterar pelos frames de dados do Grafana\ncontext.panel.data.series.forEach((series, seriesIndex) => {\n  // Encontrar os campos de valores numéricos e de tempo\n  const timeField = series.fields.find((field) => field.type === 'time');\n  const valueFields = series.fields.filter((field) => field.type === 'number');\n\n  // Iterar sobre cada conjunto de valores numéricos\n  valueFields.forEach((valueField, valueIndex) => {\n    // Garantir que os nomes das séries sejam extraídos corretamente\n    const seriesName = valueField.config.displayNameFromDS || valueField.name || `Series ${seriesIndex + 1}.${valueIndex + 1}`;\n\n    // Mapear os dados de tempo e valores para o formato [tempo, valor, unidade]\n    const data = valueField.values.map((d, index) => {\n      const converted = convertBps(parseFloat(d));\n      return {\n        time: new Date(timeField.values.get(index)).toLocaleTimeString(),\n        value: parseFloat(converted.value),\n        unit: converted.unit\n      };\n    });\n\n    // Adicionar os rótulos de tempo se ainda não estiverem definidos\n    if (timeLabels.length === 0) {\n      timeLabels = timeField.values.map(time => new Date(time).toLocaleTimeString());\n    }\n\n    // Adicionar a série de dados ao array de séries\n    seriesData.push({\n      name: seriesName,\n      type: 'line',\n      stack: 'Total',\n      smooth: true,\n      lineStyle: {\n        width: 0\n      },\n      showSymbol: false,\n      areaStyle: {\n        opacity: 0.8,\n        color: new context.echarts.graphic.LinearGradient(0, 0, 0, 1, [\n          { offset: 0, color: getRandomColor() },\n          { offset: 1, color: getRandomColor() }\n        ])\n      },\n      emphasis: {\n        focus: 'series'\n      },\n      data: data\n    });\n  });\n});\n\nconst commonUnit = getCommonUnit(seriesData);\n\nreturn {\n  color: seriesData.map(() => getRandomColor()), // Aplicar cores aleatórias às séries\n  tooltip: {\n    trigger: 'axis',\n    axisPointer: {\n      type: 'cross',\n      label: {\n        backgroundColor: '#6a7985'\n      }\n    },\n    formatter: function (params) {\n      let tooltipText = params[0].name + '<br/>';\n      params.forEach(param => {\n        const seriesName = param.seriesName;\n        const dataIndex = param.dataIndex;\n        const data = seriesData.find(s => s.name === seriesName).data[dataIndex];\n        tooltipText += `${seriesName}: ${data.value} ${data.unit}<br/>`;\n      });\n      return tooltipText;\n    }\n  },\n  legend: {\n    data: seriesData.map(s => s.name)\n  },\n  toolbox: {\n    orient: 'vertical',\n    left: 'right',\n    top: 'center',\n    feature: {\n      saveAsImage: {}\n    }\n  },\n  grid: {\n    left: '3%',\n    right: '4%',\n    bottom: '3%',\n    containLabel: true\n  },\n  xAxis: [{\n    type: 'category',\n    boundaryGap: false,\n    data: timeLabels,\n    axisLine: {\n      lineStyle: {\n        color: '#ccc'\n      }\n    },\n    axisLabel: {\n      textStyle: {\n        color: '#ccc'\n      }\n    },\n    splitLine: {\n      show: false // Remover as linhas de fundo\n    }\n  }],\n  yAxis: [{\n    type: 'value',\n    axisLine: {\n      lineStyle: {\n        color: '#ccc'\n      }\n    },\n    axisLabel: {\n      formatter: function (value) {\n        const converted = convertBps(value);\n        return `${converted.value} ${commonUnit}`;\n      },\n      textStyle: {\n        color: '#ccc'\n      }\n    },\n    splitLine: {\n      show: false // Remover as linhas de fundo\n    }\n  }],\n  series: seriesData.map(s => ({\n    ...s,\n    data: s.data.map(d => d.value)\n  }))\n};\n",
          "dataset": [],
          "series": []
        }
      },
      "pluginVersion": "5.3.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": "/Bits/"
          },
          "itemTag": {
            "filter": "Network Interfaces Bits"
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "count": false,
            "disableDataAlignment": false,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "0",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "transparent": true,
      "type": "volkovlabs-echarts-panel"
    },
    {
      "datasource": {
        "type": "alexanderzobnin-zabbix-datasource",
        "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
      },
      "gridPos": {
        "h": 15,
        "w": 24,
        "x": 0,
        "y": 43
      },
      "id": 27,
      "options": {
        "ackEventColor": "rgb(56, 219, 156)",
        "ackField": false,
        "ageField": true,
        "allowDangerousHTML": false,
        "customLastChangeFormat": false,
        "descriptionAtNewLine": false,
        "descriptionField": true,
        "fontSize": "100%",
        "highlightBackground": false,
        "highlightNewEvents": false,
        "highlightNewerThan": "1h",
        "hostField": true,
        "hostGroups": false,
        "hostProxy": false,
        "hostTechNameField": false,
        "lastChangeFormat": "",
        "layout": "table",
        "markAckEvents": false,
        "okEventColor": "rgb(56, 189, 113)",
        "opdataField": false,
        "pageSize": 10,
        "problemTimeline": true,
        "severityField": true,
        "showTags": true,
        "sortProblems": "lastchange",
        "statusField": true,
        "statusIcon": true,
        "triggerSeverity": [
          {
            "color": "rgb(108, 108, 108)",
            "priority": 0,
            "severity": "Not classified",
            "show": true
          },
          {
            "color": "rgb(120, 158, 183)",
            "priority": 1,
            "severity": "Information",
            "show": true
          },
          {
            "color": "rgb(175, 180, 36)",
            "priority": 2,
            "severity": "Warning",
            "show": true
          },
          {
            "color": "rgb(255, 137, 30)",
            "priority": 3,
            "severity": "Average",
            "show": true
          },
          {
            "color": "rgb(255, 101, 72)",
            "priority": 4,
            "severity": "High",
            "show": true
          },
          {
            "color": "rgb(215, 0, 0)",
            "priority": 5,
            "severity": "Disaster",
            "show": true
          }
        ]
      },
      "pluginVersion": "9.5.0",
      "targets": [
        {
          "application": {
            "filter": ""
          },
          "countTriggersBy": "",
          "datasource": {
            "type": "alexanderzobnin-zabbix-datasource",
            "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
          },
          "evaltype": "0",
          "functions": [],
          "group": {
            "filter": "OLT"
          },
          "host": {
            "filter": "$host"
          },
          "item": {
            "filter": ""
          },
          "itemTag": {
            "filter": ""
          },
          "macro": {
            "filter": ""
          },
          "options": {
            "acknowledged": 2,
            "count": false,
            "disableDataAlignment": false,
            "hostProxy": false,
            "hostsInMaintenance": false,
            "limit": 1001,
            "minSeverity": 0,
            "showDisabledItems": false,
            "skipEmptyValues": false,
            "sortProblems": "default",
            "useTimeRange": false,
            "useTrends": "default",
            "useZabbixValueMapping": false
          },
          "proxy": {
            "filter": ""
          },
          "queryType": "5",
          "refId": "A",
          "resultFormat": "time_series",
          "schema": 12,
          "showProblems": "problems",
          "table": {
            "skipEmptyValues": false
          },
          "tags": {
            "filter": ""
          },
          "textFilter": "",
          "trigger": {
            "filter": ""
          }
        }
      ],
      "title": "Painel de Incidentes - OLT",
      "type": "alexanderzobnin-zabbix-triggers-panel"
    }
  ],
  "refresh": "1m",
  "schemaVersion": 38,
  "style": "dark",
  "tags": [
    "olt",
    "zte",
    "gpon"
  ],
  "templating": {
    "list": [
      {
        "current": {
          "selected": false,
          "text": "OLT-ZTE",
          "value": "OLT-ZTE"
        },
        "datasource": {
          "type": "alexanderzobnin-zabbix-datasource",
          "uid": "ec9704d6-c9bc-4296-92ac-65ef35d7658f"
        },
        "definition": "Zabbix - host",
        "hide": 0,
        "includeAll": false,
        "label": "OLT",
        "multi": false,
        "name": "host",
        "options": [],
        "query": {
          "application": "",
          "group": "/OLT/",
          "host": "/OLT-ZTE/",
          "item": "",
          "itemTag": "",
          "queryType": "host"
        },
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "type": "query"
      }
    ]
  },
  "time": {
    "from": "now-1h",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Dashboard OLT ZTE C3x ",
  "uid": "eef8p0x0hlxxcd",
  "version": 16,
  "weekStart": ""
}
